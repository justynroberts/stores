- defaultTab: output
  description: Check for Online
  executionEnabled: true
  group: Admin
  id: 65239ad8-11c3-4d92-adda-ae89a05be91b
  loglevel: INFO
  multipleExecutions: true
  name: Check Online
  nodeFilterEditable: false
  plugins:
    ExecutionLifecycle: null
  schedule:
    month: '*'
    time:
      hour: '0'
      minute: 0/5
      seconds: '0'
    weekday:
      day: '*'
    year: '*'
  scheduleEnabled: true
  schedules: []
  sequence:
    commands:
    - autoSecureInput: 'false'
      description: Check for Internet Connectivity
      interpreterArgsQuoted: false
      passSecureInput: 'false'
      script: "# connection_check.py\nimport os\nimport datetime\nimport subprocess\n\
        import platform\n\n# Configuration\nLOG_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\
        \ \"connection-log.txt\")\nOUTAGES_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\
        \ \"outages.txt\")\nPING_TARGET = \"8.8.8.8\"  # Google DNS\nSTATUS_FILE =\
        \ os.path.join(os.path.dirname(os.path.abspath(__file__)), \"connection-status.txt\"\
        )\n\ndef ping(host):\n    \"\"\"Return True if host responds to a ping request\"\
        \"\"\n    param = \"-n\" if platform.system().lower() == \"windows\" else\
        \ \"-c\"\n    command = [\"ping\", param, \"1\", host]\n    \n    try:\n \
        \       subprocess.check_output(command, stderr=subprocess.STDOUT, universal_newlines=True)\n\
        \        return True\n    except subprocess.CalledProcessError:\n        return\
        \ False\n\ndef format_duration(seconds):\n    \"\"\"Format duration in human-readable\
        \ format\"\"\"\n    if seconds < 60:\n        return f\"{round(seconds)} seconds\"\
        \n    elif seconds < 3600:\n        return f\"{round(seconds / 60)} minutes\"\
        \n    else:\n        hours = int(seconds // 3600)\n        mins = round((seconds\
        \ % 3600) / 60)\n        return f\"{hours} hours, {mins} minutes\"\n\n# Make\
        \ sure log file exists\nif not os.path.exists(LOG_FILE):\n    with open(LOG_FILE,\
        \ \"w\") as f:\n        f.write(\"--- CONNECTION MONITORING LOG ---\\n\")\n\
        \n# Check for status file to track outage state\nwas_offline = False\noffline_start_time\
        \ = None\nif os.path.exists(STATUS_FILE):\n    with open(STATUS_FILE, \"r\"\
        ) as f:\n        status_data = f.read().strip().split(\"|\")\n        if len(status_data)\
        \ >= 2 and status_data[0] == \"OFFLINE\":\n            was_offline = True\n\
        \            offline_start_time = datetime.datetime.strptime(status_data[1],\
        \ \"%Y-%m-%d %H:%M:%S\")\n\n# Check current connection status\ntimestamp =\
        \ datetime.datetime.now()\nis_online = ping(PING_TARGET)\n\n# Handle output\
        \ based on connection status\nif is_online:\n    # Internet is available -\
        \ output positive with style\n    print(\"üåê ‚úÖ POSITIVE - Connection Active\"\
        )\n    print(f\"   ‚îî‚îÄ Online at {timestamp.strftime('%H:%M:%S')}\")\nelse:\n\
        \    # No internet - output negative and write to file\n    print(\"üö´ ‚ùå NEGATIVE\
        \ - Connection Lost\")\n    print(f\"   ‚îî‚îÄ Offline at {timestamp.strftime('%H:%M:%S')}\"\
        )\n    \n    # Write \"outages\" to file\n    with open(OUTAGES_FILE, \"a\"\
        ) as f:\n        f.write(f\"outages - {timestamp.strftime('%Y-%m-%d %H:%M:%S')}\\\
        n\")\n\n# Handle transitions (keeping your original logging logic)\nif not\
        \ is_online:\n    if not was_offline:\n        # Just went offline - log it\n\
        \        offline_start_time = timestamp\n        \n        with open(LOG_FILE,\
        \ \"a\") as f:\n            f.write(f\"\\n[OUTAGE START] {timestamp.strftime('%Y-%m-%d\
        \ %H:%M:%S')}\\n\")\n        \n        # Save status for next run\n      \
        \  with open(STATUS_FILE, \"w\") as f:\n            f.write(f\"OFFLINE|{timestamp.strftime('%Y-%m-%d\
        \ %H:%M:%S')}\")\n    \n    # If already offline, no need to update logs -\
        \ just exit\n    else:\n        # Update status file with current time to\
        \ keep tracking accurate\n        with open(STATUS_FILE, \"w\") as f:\n  \
        \          f.write(f\"OFFLINE|{offline_start_time.strftime('%Y-%m-%d %H:%M:%S')}\"\
        )\n            \nelif is_online and was_offline:\n    # Just came back online\
        \ - log it\n    duration = (timestamp - offline_start_time).total_seconds()\n\
        \    \n    with open(LOG_FILE, \"a\") as f:\n        f.write(f\"[OUTAGE END]\
        \ {timestamp.strftime('%Y-%m-%d %H:%M:%S')} (Duration: {format_duration(duration)})\\\
        n\")\n    \n    # Reset status file\n    if os.path.exists(STATUS_FILE):\n\
        \        os.remove(STATUS_FILE)"
      scriptInterpreter: python3
    keepgoing: false
    strategy: node-first
  uuid: 65239ad8-11c3-4d92-adda-ae89a05be91b

